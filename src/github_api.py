import requests
import httpx

def list_open_pull_requests(repo_full_name: str, config: dict) -> list:
    """
    Returns a list of open pull requests for the specified repo.
    """
    url = f"https://api.github.com/repos/{repo_full_name}/pulls?state=open"
    headers = {
        "Authorization": f"Bearer {config['github_token']}",
        "Accept": "application/vnd.github.v3+json"
    }

    response = httpx.get(url, headers=headers)
    response.raise_for_status()
    return response.json()

def check_existing_comment(repo: str, pr_number: int, config: dict) -> bool:
    """
    Checks if a comment with the constant AI review tag has already been posted to the PR.
    Returns:
        bool: True if already exists, False otherwise
    """
    headers = {
        "Authorization": f"Bearer {config['github_token']}",
        "Accept": "application/vnd.github.v3+json"
    }

    url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
    resp = requests.get(url, headers=headers)

    if resp.status_code != 200:
        raise RuntimeError(f"Failed to fetch PR comments: {resp.status_code} - {resp.text}")

    comments = resp.json()
    for comment in comments:
        if "<!-- ai-review -->" in comment.get("body", ""):
            return True

    return False

def fetch_pr_diff(repo_full_name: str, pr_number: int, config: dict) -> str:
    """
    Fetches the diff for a specific pull request using GitHub REST API.
    """
    headers = {
        "Authorization": f"Bearer {config['github_token']}",
        "Accept": "application/vnd.github.v3.diff"
    }

    url = f"https://api.github.com/repos/{repo_full_name}/pulls/{pr_number}"
    response = requests.get(url, headers=headers)

    if response.status_code != 200:
        raise RuntimeError(f"Failed to fetch PR diff: {response.status_code} - {response.text}")

    return response.text

def post_review_comment(repo: str, pr_number: int, review_body: str, config: dict) -> None:
    """
    Posts a new comment to the pull request with a constant fingerprint tag.
    """
    headers = {
        "Authorization": f"Bearer {config['github_token']}",
        "Accept": "application/vnd.github.v3+json"
    }

    marker = "<!-- ai-review -->"
    attribution = (
        "\n\n---\n"
        "_This comment was AI-generated by [AI-Github-PR-Bot](https://github.com/adamdubsky/AI-Github-PR-Bot)._"
    )
    full_body = f"{marker}\n\n{review_body}{attribution}"

    url = f"https://api.github.com/repos/{repo}/issues/{pr_number}/comments"
    resp = requests.post(url, headers=headers, json={"body": full_body})

    if resp.status_code != 201:
        raise RuntimeError(f"Failed to post PR comment: {resp.status_code} - {resp.text}")

def get_pr_title(repo: str, pr_number: int, config: dict) -> str:
    headers = {
        "Authorization": f"Bearer {config['github_token']}",
        "Accept": "application/vnd.github.v3+json"
    }
    url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}"
    response = requests.get(url, headers=headers)
    return response.json().get("title", "")
